
# CONF_VERSION is increased each time build/conf/ changes incompatibly
CONF_VERSION = "1"

INHERIT += "rm_work buildhistory"
BUILDHISTORY_COMMIT = "1"

# Which files do we want to parse:
BBMASK = "meta-ros/recipes-extended/wxwidgets|meta-ros/recipes-support/boost|meta/recipes-core/jpeg/"

# What kind of additional images do we want?
# default is sdimg.xz, but ext4, ext4.xz and uncompressed sdimg are possible
IMAGE_FSTYPES = ""

# Remove old image file (to save space) before new one is created.
RM_OLD_IMAGE="1"

# Make use of SMP:
#   PARALLEL_MAKE specifies how many concurrent compiler threads are spawned per bitbake process
#   BB_NUMBER_THREADS specifies how many concurrent bitbake tasks will be run
PARALLEL_MAKE     = "-j3"
BB_NUMBER_THREADS = "3"

DISTRO = ""

# classic way to extend image
#CORE_IMAGE_EXTRA_INSTALL += "mono fsharp"
#preferred way to add packages 
#IMAGE_INSTALL_append = " mono fsharp"

# Set DEPLOY_DIR outside of TMPDIR

PACKAGE_CLASSES = "package_ipk"
SDKMACHINE = "i686"
SDK_NAME_PREFIX = "trik-sdk"
SDKPATH = "/opt/${SDK_NAME_PREFIX}"

EXTRA_IMAGE_FEATURES = "debug-tweaks"
USER_CLASSES += "buildstats"

DEPLOY_DIR = "${TMPDIR}/../../deploy/${TCLIBC}"

# Path to the dir where the TI tools are unpacked
TITOOLSDIR = "/opt"
# Path under TITOOLSDIR where dspbios is unpacked
TIBIOSDIR = "bios_5_33_02"
TIXDCTOOLSDIR = "${TITOOLSDIR}/xdctools_3_30_06_67_core"
# Path under TITOOLSDIR where the dsp toolchain is unpacked
TICGTOOLSDIR = "ti-cgt-c6000_8.0.1"


# Don't generate the mirror tarball for SCM repos, the snapshot is enough
BB_GENERATE_MIRROR_TARBALLS = "0"

# Disable build time patch resolution. This would lauch a devshell
# and wait for manual intervention. We disable it.
PATCHRESOLVE = "noop"

#
# Shared-state files from other locations
#
# Shared state files are prebuilt cache data objects which can 
# used to accelerate build time. This variable can be used to configure the system
# to search other mirror locations for these objects before it builds the data itself.
#
# This can be a filesystem directory, or a remote url such as http or ftp. These
# would contain the sstate-cache results from previous builds (possibly from other 
# machines). This variable works like fetcher MIRRORS/PREMIRRORS and points to the 
# cache locations to check for the shared objects.
#SSTATE_MIRRORS ?= "\
#file://.* http://someserver.tld/share/sstate/ \n \
#file://.* file:///some/local/dir/sstate/"

#SSTATE_MIRRORS ?= "\
#file://.* http://dominion.thruhere.net/angstrom/sstate-mirror/ \n "

# enable PR service on build machine itself
# its good for a case when this is the only builder
# generating the feeds
#
PRSERV_HOST = "localhost:0"

PREMIRRORS_prepend = "\
     git://.*/.* http://downloads.trikset.com/mirror/downloads/ \n \
     ftp://.*/.* http://downloads.trikset.com/mirror/downloads/ \n \
     http://.*/.* http://downloads.trikset.com/mirror/downloads/ \n \
     https://.*/.* http://downloads.trikset.com/mirror/downloads/ \n"

REFERRED_PROVIDER_virtual/java-initial = "cacao-initial"

PREFERRED_PROVIDER_virtual/java-native = "jamvm-native"
PREFERRED_PROVIDER_virtual/javac-native = "ecj-bootstrap-native"

PREFERRED_VERSION_openjdk-6-jre = "6b27-1.12.5"
PREFERRED_VERSION_icedtea6-native = "1.8.11"

PREFERRED_VERSION_openjdk-7-jre = "25b30-2.3.12"
PREFERRED_VERSION_icedtea7-native = "2.1.3"

TRIK_GCC_VERSION                                = "4.8%"
SDKGCCVERSION                                   = "${TRIK_GCC_VERSION}"
PREFERRED_VERSION_gcc                           = "${TRIK_GCC_VERSION}"
PREFERRED_VERSION_gcc-cross                     = "${TRIK_GCC_VERSION}"
PREFERRED_VERSION_gcc-cross-initial             = "${TRIK_GCC_VERSION}"
PREFERRED_VERSION_gcc-cross-initial-${TARGET_ARCH}        = "${TRIK_GCC_VERSION}"

PREFERRED_VERSION_gcc-cross-${TARGET_ARCH}              = "${TRIK_GCC_VERSION}"
PREFERRED_VERSION_gcc-cross-intermediate        = "${TRIK_GCC_VERSION}"
PREFERRED_VERSION_gcc-cross-canadian            = "${TRIK_GCC_VERSION}"
PREFERRED_VERSION_gcc-crosssdk                  = "${TRIK_GCC_VERSION}"

PREFERRED_VERSION_gcc-crosssdk-initial-arm      = "${TRIK_GCC_VERSION}"
PREFERRED_VERSION_gcc-crosssdk-initial          = "${TRIK_GCC_VERSION}"
PREFERRED_VERSION_gcc-crosssdk-intermediate     = "${TRIK_GCC_VERSION}"

PREFERRED_VERSION_gcc-runtime                   = "${TRIK_GCC_VERSION}"
PREFERRED_VERSION_nativesdk-gcc-runtime         = "${TRIK_GCC_VERSION}"
PREFERRED_VERSION_libgcc                        = "${TRIK_GCC_VERSION}"
PREFERRED_VERSION_libgcc-initial                = "${TRIK_GCC_VERSION}"
PREFERRED_VERSION_nativesdk-libgcc              = "${TRIK_GCC_VERSION}"
PREFERRED_VERSION_nativesdk-libgcc-initial      = "${TRIK_GCC_VERSION}"

PREFERRED_VERSION_gcc-cross-canadian-${TRANSLATED_TARGET_ARCH} = "${TRIK_GCC_VERSION}"

PREFERRED_PROVIDER_virtual/${TARGET_PREFIX}gcc-initial = "gcc-cross-initial"
PREFERRED_PROVIDER_virtual/${TARGET_PREFIX}gcc = "gcc-cross"
PREFERRED_PROVIDER_virtual/${TARGET_PREFIX}g++ = "gcc-cross"
PREFERRED_PROVIDER_virtual/${TARGET_PREFIX}compilerlibs = "gcc-runtime"

PREFERRED_PROVIDER_libgcc = "libgcc"
PREFERRED_PROVIDER_libgcc-nativesdk = "libgcc-nativesdk"

LICENSE_FLAGS_WHITELIST = "commercial_gst-fluendo-mp3 \
                          commercial_gst-openmax \
                          commercial_gst-plugins-ugly \
                          commercial_lame \
                          commercial_libmad \
                          commercial_libav \
                          commercial_x264 \
                          commercial_gst-ffmpeg \
                          commercial_mpeg2dec \
"

TRIKOS_VERSION="beta2"

